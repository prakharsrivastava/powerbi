def generate_select_statement(columns, values):
    if len(columns) != len(values):
        raise ValueError("Columns and values lists must have the same length")

    select_list = [f'"{column}" as {value}' if not column.startswith('"') else f"{column} as {value}" for column, value in zip(columns, values)]
    select_statement = ", ".join(select_list)
    return f"SELECT {select_statement}"


columns = ["a", "b", "c"]
values = [1, 2, 3]

select_query = generate_select_statement(columns, values)
print(select_query)


def generate_select_statement(columns, values_list):
    if not columns or not values_list:
        raise ValueError("Columns and values list must not be empty")

    # Ensure that each set of values has the same length as the columns
    for values in values_list:
        if len(values) != len(columns):
            raise ValueError("Each set of values must have the same length as columns")

    select_statements = []

    for values in values_list:
        select_list = [f'"{value}" as {column}' if not column.startswith('"') else f"{value} as {column}" for column, value in zip(columns, values)]
        select_statement = ", ".join(select_list)
        select_statements.append(select_statement)

    return select_statements



def remove_single_quotes(input_list, indices_to_process):
    result_list = []

    for index, item in enumerate(input_list):
        if index in indices_to_process:
            # Remove single quotes from the item
            cleaned_item = item.replace("'", "")
            result_list.append(cleaned_item)
        else:
            result_list.append(item)

    return result_list

input_list = ['select', "'98', 'xyz'", 'from', "'table'", 'where', "'condition'"]
indices_to_process = [1, 3]  # Specify the indices of elements to process

output_list = remove_single_quotes(input_list, indices_to_process)
print(output_list)



import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv('sports.csv')

# Generate the SQL query
sql_query = "SELECT {} AS SPRT_ID, '{}' AS SPORT, '{}' AS ORACLE_SPORT, {} AS ORACLE_PROD_NUMBER".format(
    df['SPRT_ID'].iloc[0], df['SPORT'].iloc[0], df['ORACLE_SPORT'].iloc[0], df['ORACLE_PROD_NUMBER'].iloc[0])

for i in range(1, len(df)):
    sql_query += f" UNION SELECT {df['SPRT_ID'].iloc[i]}, '{df['SPORT'].iloc[i]}', '{df['ORACLE_SPORT'].iloc[i]}', {df['ORACLE_PROD_NUMBER'].iloc[i]}"

print(sql_query)
