import org.apache.spark.sql.{SparkSession, DataFrame}
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types._

object CSVToJsonConverter {

  def main(args: Array[String]): Unit = {
    val spark = SparkSession.builder.appName("CSVToJsonConverter").getOrCreate()

    // Replace "path/to/your/input.csv" with the actual path to your CSV file
    val csvFilePath = "path/to/your/input.csv"

    // Read CSV file into a DataFrame
    val df = spark.read.option("header", "true").csv(csvFilePath)

    // Convert DataFrame columns to JSON
    val columnsJson = df.columns.map(colName => struct(lit(colName).alias("column"), col(colName).alias("data")))
    val columnsJsonDF = df.select(array(columnsJson: _*).alias("columns"))

    // Convert DataFrame rows to JSON
    val rowsJsonDF = df.select(to_json(struct(df.columns.map(col): _*)).alias("row"))

    // Combine columns and rows JSON
    val resultDF = columnsJsonDF.crossJoin(rowsJsonDF)

    // Convert the DataFrame to a JSON string with each record on a new line
    val jsonString = resultDF
      .selectExpr("to_json(struct(columns, row)) as json")
      .toJSON
      .collect()
      .mkString("\n")

    // Print the JSON string
    println(jsonString)

    // Stop the Spark session
    spark.stop()
  }
}
import org.apache.spark.sql.{SparkSession, DataFrame}
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types._

object CSVToJsonConverter {

  def main(args: Array[String]): Unit = {
    val spark = SparkSession.builder.appName("CSVToJsonConverter").getOrCreate()

    // Replace "path/to/your/input.csv" with the actual path to your CSV file
    val csvFilePath = "path/to/your/input.csv"

    // Read CSV file into a DataFrame
    val df = spark.read.option("header", "true").csv(csvFilePath)

    // Convert DataFrame rows to JSON
    val jsonDF = df.select(to_json(struct(df.columns.map(col): _*)).alias("json"))

    // Show the resulting JSON DataFrame
    jsonDF.show(truncate = false)

    // Stop the Spark session
    spark.stop()
  }
}

      .selectExpr("regexp_replace(json, ': \"(.*?)\"', ': $1') as json")

val jsonDF = df
      .selectExpr(
        "to_json(named_struct(" +
          df.columns.map(colName => s"'$colName', cast($colName as string)").mkString(", ") +
          ")) as json"
      )
      .selectExpr("regexp_replace(json, ': \"(.*?)\"', ': $1') as json")



