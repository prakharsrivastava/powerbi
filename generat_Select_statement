import org.springframework.http.HttpStatus;
import org.springframework.web.reactive.function.client.WebClient;
import java.util.Optional;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicReference;
import org.junit.jupiter.api.Assertions; // JUnit 5 assertions

public class Main {

    private WebClient client;

    public Main() {
        // Initialize WebClient
        client = WebClient.create("http://example.com");
    }

    public void method1() throws InterruptedException {
        // Use a CountDownLatch to wait for the asynchronous operation to complete
        CountDownLatch latch = new CountDownLatch(1);
        AtomicReference<Pair<HttpStatus, Optional<String>>> responseRef = new AtomicReference<>();

        // Asynchronously call the web client and set the response
        callWebClient(() -> {
            client.method1().subscribe(responseBody -> {
                responseRef.set(new Pair<>(HttpStatus.OK, Optional.ofNullable(responseBody)));
                latch.countDown();  // Decrement the latch to indicate completion
            }, error -> {
                responseRef.set(new Pair<>(HttpStatus.INTERNAL_SERVER_ERROR, Optional.empty()));
                latch.countDown();  // Decrement the latch in case of an error
            });
            return null;
        });

        // Wait for the WebClient call to complete
        latch.await();

        // Get the response and assert that the status is OK
        Pair<HttpStatus, Optional<String>> response = responseRef.get();
        Assertions.assertEquals(HttpStatus.OK, response.getKey(), "Expected HTTP status OK, but got: " + response.getKey());
    }

    public Pair<HttpStatus, Optional<String>> callWebClient(Supplier<Void> supplier) {
        try {
            supplier.get();
            // The return value is set asynchronously, so just return a placeholder here
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            return new Pair<>(HttpStatus.INTERNAL_SERVER_ERROR, Optional.empty());
        }
    }

    public static void main(String[] args) throws InterruptedException {
        Main main = new Main();
        main.method1();
    }
}

// A simple Pair class if not using JavaFX or other libraries that provide it
class Pair<K, V> {
    private final K key;
    private final V value;

    public Pair(K key, V value) {
        this.key = key;
        this.value = value;
    }

    public K getKey() {
        return key;
    }

    public V getValue() {
        return value;
    }
}
